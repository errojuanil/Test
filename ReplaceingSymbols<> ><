using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Sample2
{
    class Program
    {
        static void Main(string[] args)
        {
            //Input 2 <<>> <<>>, 2 1 1 
            int[] result;
            int expressions_Size, maxReplacements_Size;
            Console.WriteLine("Enter Size for expressions");
            expressions_Size = Convert.ToInt32(Console.ReadLine());
            string[] expression = new string[expressions_Size];

            for (int i = 0; i < expressions_Size; i++)
            {
                expression[i] = Console.ReadLine();
            }
            Console.WriteLine("Enter Size for max_Replacements");
            maxReplacements_Size = Convert.ToInt32(Console.ReadLine());
            int[] maxReplacements = new int[maxReplacements_Size];
            for (int i = 0; i < expressions_Size; i++)
            {
                maxReplacements[i] = Convert.ToInt32(Console.ReadLine());
            }
            result = balancedOrNot(expression, maxReplacements);

            Console.ReadLine();

        }
        static int[] balancedOrNot(string[] exp, int[] maxReplacements)
        {
            int[] res = new int[exp.Length];
            char[] expression;
            string expression_item;
            int lessThanSymbol = 0;
            int greaterThanSymbol = 0;
            for (int expressions_i = 0; expressions_i < exp.Length; expressions_i++)
            {
                expression_item = exp[expressions_i];

                expression = expression_item.ToCharArray();
                for (int symbol_i = 0; symbol_i < expression.Length; symbol_i++)
                {
                    if (expression[symbol_i] == '<')
                    {
                        
                        //else
                        //{
                            lessThanSymbol = lessThanSymbol + 1;
                        //}
                    }
                    else
                    {
                      /*  if (symbol_i == 0)
                        { // res = 0;
                            res[expressions_i] = 0;

                        }
                        else
                        { */

                            greaterThanSymbol = greaterThanSymbol + 1;
                       // }


                    }
                    if (lessThanSymbol == greaterThanSymbol)
                    {
                        lessThanSymbol = 0;
                        greaterThanSymbol = 0;
                    }
                    if (greaterThanSymbol == lessThanSymbol)
                    {

                        res[expressions_i] = 1;

                    }
                    else if (greaterThanSymbol < lessThanSymbol)
                    {
                        res[expressions_i] = 0;

                    }
                    else if (greaterThanSymbol > lessThanSymbol)
                    {
                        if (maxReplacements[expressions_i] > 0)
                        {
                            res[expressions_i] = replaceAndCheck(greaterThanSymbol, maxReplacements[expressions_i]);
                        }
                        else
                        {
                            res[expressions_i] = 0;
                        }
                        //Call function with no.of greatern symbols, max replacements.
                    }
                    if (symbol_i == expression.Length - 1)
                    {
                        if (expression[symbol_i] == '<')
                            res[expressions_i] = 0;
                    }


                }
               



            } // For loop for ex


            return res;
        }

        static int replaceAndCheck(int noOfGreatherthanSymbols, int maxReplacements)
        {
            int result = 0;
            if (noOfGreatherthanSymbols <= maxReplacements)
            {
                result = 1;
            }
            else
            {
                result = 0;
            }

            return result;

        }


    }
}
